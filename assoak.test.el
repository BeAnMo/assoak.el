(require 'assoak)

(ert-deftest test-assoak-merge-plists ()
  "Tests the shallow merge of 2 plists."
  (should (equal (assoak-merge-plists '(:a 1 :b 2 :c 3)
				      '(:d 4))
		 '(:a 1 :b 2 :c 3 :d 4)))
  (should (equal (assoak-merge-plists '(:a 1 :b 2)
				      '(:a 1 :c 3))
		 '(:a 1 :b 2 :c 3)))
  (should (equal (assoak-merge-plists '(:a 1 :b 2)
				      '(:a 1 :b 2))
		 '(:a 1 :b 2)))
  (should (equal (assoak-merge-plists '(:a 1 :b 2)
				      '(:b 3))
		 '(:a 1 :b 3)))
  (should (equal (assoak-merge-plists nil nil) nil))
  (should (equal (assoak-merge-plists nil '(:a 1)) '(:a 1)))
  (should (equal (assoak-merge-plists '(:a 1) nil) '(:a 1))))
	  

(ert-deftest test-assoak-plist-to-alist ()
  (should (equal (assoak-plist-to-alist nil)
		 nil))
  (should (equal (assoak-plist-to-alist '(:a 1))
		 '((:a . 1))))
  (should (equal (assoak-plist-to-alist '(:a 1 :b 2))
		 '((:a . 1) (:b . 2)))))

(ert-deftest test-assoak-shallow-merge-alists ()
  (should (equal (assoak-shallow-merge-alists nil nil)
		 nil))
  (should (equal (assoak-shallow-merge-alists '((a . 1)) nil)
		 '((a . 1))))
  (should (equal (assoak-shallow-merge-alists nil '((a . 1)))
		 '((a . 1))))
  (should (equal (assoak-shallow-merge-alists '((a . 1))
					      '((a . 1)))
		 '((a . 1))))
  (should (equal (assoak-shallow-merge-alists '((a . 1) (b . 2))
					      '((c . 3)))
		 '((a . 1) (b . 2) (c . 3))))
  (should (equal (assoak-shallow-merge-alists '((a . 1) (b . 2))
					      '((a . 3) (c . 3)))
		 '((a . 3) (b . 2) (c . 3)))))
